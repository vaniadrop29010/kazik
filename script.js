class Casino {
    constructor() {
        this.balance = 1000;
        this.selectedBet = null;
        this.selectedBetType = null;
        this.gameInProgress = false;
        
        // –ë–ª—ç–∫–¥–∂–µ–∫
        this.deck = [];
        this.playerHand = [];
        this.dealerHand = [];
        this.blackjackInProgress = false;
        
        this.initializeEventListeners();
        this.updateBalance();
    }

    initializeEventListeners() {
        // –°–ª–æ—Ç –º–∞—à–∏–Ω–∞
        document.getElementById('spin-btn').addEventListener('click', () => this.playSlots());
        
        // –†—É–ª–µ—Ç–∫–∞
        document.querySelectorAll('.bet-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.selectBet(e.target.dataset.type));
        });
        document.getElementById('spin-roulette').addEventListener('click', () => this.playRoulette());
        
        // –ë–ª—ç–∫–¥–∂–µ–∫
        document.getElementById('deal-btn').addEventListener('click', () => this.dealBlackjack());
        document.getElementById('hit-btn').addEventListener('click', () => this.hit());
        document.getElementById('stand-btn').addEventListener('click', () => this.stand());
    }

    updateBalance() {
        document.getElementById('balance').textContent = this.balance;
    }

    addToLog(message) {
        const log = document.getElementById('log');
        const entry = document.createElement('div');
        entry.className = 'log-entry';
        entry.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
        log.insertBefore(entry, log.firstChild);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (log.children.length > 10) {
            log.removeChild(log.lastChild);
        }
    }

    // –°–õ–û–¢ –ú–ê–®–ò–ù–ê
    playSlots() {
        const bet = parseInt(document.getElementById('slot-bet').value);
        if (bet > this.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        this.balance -= bet;
        this.updateBalance();

        const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£'];
        const reels = [
            document.getElementById('reel1'),
            document.getElementById('reel2'),
            document.getElementById('reel3')
        ];

        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        reels.forEach(reel => {
            reel.style.animation = 'none';
            reel.offsetHeight; // Trigger reflow
            reel.style.animation = 'spin 1s ease-in-out';
        });

        setTimeout(() => {
            const results = [];
            reels.forEach(reel => {
                const symbol = symbols[Math.floor(Math.random() * symbols.length)];
                reel.textContent = symbol;
                results.push(symbol);
            });

            this.checkSlotWin(results, bet);
        }, 1000);
    }

    checkSlotWin(results, bet) {
        let winAmount = 0;
        
        if (results[0] === results[1] && results[1] === results[2]) {
            // –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
            if (results[0] === 'üíé') winAmount = bet * 10;
            else if (results[0] === '7Ô∏è‚É£') winAmount = bet * 8;
            else if (results[0] === 'üîî') winAmount = bet * 6;
            else winAmount = bet * 4;
        } else if (results[0] === results[1] || results[1] === results[2] || results[0])
class Casino {
    constructor() {
        this.balance = 1000;
        this.selectedBet = null;
        this.selectedBetType = null;
        this.gameInProgress = false;
        
        // –ë–ª—ç–∫–¥–∂–µ–∫
        this.deck = [];
        this.playerHand = [];
        this.dealerHand = [];
        this.blackjackInProgress = false;
        
        this.initializeEventListeners();
        this.updateBalance();
    }

    initializeEventListeners() {
        // –°–ª–æ—Ç –º–∞—à–∏–Ω–∞
        document.getElementById('spin-btn').addEventListener('click', () => this.playSlots());
        
        // –†—É–ª–µ—Ç–∫–∞
        document.querySelectorAll('.bet-btn').forEach(btn => {
            btn.addEventListener('click', (e) => this.selectBet(e.target.dataset.type));
        });
        document.getElementById('spin-roulette').addEventListener('click', () => this.playRoulette());
        
        // –ë–ª—ç–∫–¥–∂–µ–∫
        document.getElementById('deal-btn').addEventListener('click', () => this.dealBlackjack());
        document.getElementById('hit-btn').addEventListener('click', () => this.hit());
        document.getElementById('stand-btn').addEventListener('click', () => this.stand());
    }

    updateBalance() {
        document.getElementById('balance').textContent = this.balance;
    }

    addToLog(message) {
        const log = document.getElementById('log');
        const entry = document.createElement('div');
        entry.className = 'log-entry';
        entry.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
        log.insertBefore(entry, log.firstChild);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (log.children.length > 10) {
            log.removeChild(log.lastChild);
        }
    }

    // –°–õ–û–¢ –ú–ê–®–ò–ù–ê
    playSlots() {
        const bet = parseInt(document.getElementById('slot-bet').value);
        if (bet > this.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        this.balance -= bet;
        this.updateBalance();

        const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£'];
        const reels = [
            document.getElementById('reel1'),
            document.getElementById('reel2'),
            document.getElementById('reel3')
        ];

        // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        reels.forEach(reel => {
            reel.style.animation = 'none';
            reel.offsetHeight; // Trigger reflow
            reel.style.animation = 'spin 1s ease-in-out';
        });

        setTimeout(() => {
            const results = [];
            reels.forEach(reel => {
                const symbol = symbols[Math.floor(Math.random() * symbols.length)];
                reel.textContent = symbol;
                results.push(symbol);
            });

            this.checkSlotWin(results, bet);
        }, 1000);
    }

    checkSlotWin(results, bet) {
        let winAmount = 0;
        
        if (results[0] === results[1] && results[1] === results[2]) {
            // –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
            if (results[0] === 'üíé') winAmount = bet * 10;
            else if (results[0] === '7Ô∏è‚É£') winAmount = bet * 8;
            else if (results[0] === 'üîî') winAmount = bet * 6;
            else winAmount = bet * 4;
        } else if (results[0] === results[1] || results[1] === results[2] || results[0] === results[2]) {
            // –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
            winAmount = bet * 2;
        }

        if (winAmount > 0) {
            this.balance += winAmount;
            this.updateBalance();
            this.addToLog(`–°–ª–æ—Ç—ã: –í—ã–∏–≥—Ä—ã—à ${winAmount} –º–æ–Ω–µ—Ç! ${results.join(' ')}`);
        } else {
            this.addToLog(`–°–ª–æ—Ç—ã: –ü—Ä–æ–∏–≥—Ä—ã—à ${bet} –º–æ–Ω–µ—Ç. ${results.join(' ')}`);
        }
    }

    // –†–£–õ–ï–¢–ö–ê
    selectBet(betType) {
        document.querySelectorAll('.bet-btn').forEach(btn => btn.classList.remove('selected'));
        document.querySelector(`[data-type="${betType}"]`).classList.add('selected');
        this.selectedBetType = betType;
        document.getElementById('selected-bet').textContent = `–í—ã–±—Ä–∞–Ω–æ: ${this.getBetName(betType)}`;
    }

    getBetName(betType) {
        const names = {
            'red': '–ö—Ä–∞—Å–Ω–æ–µ',
            'black': '–ß–µ—Ä–Ω–æ–µ',
            'even': '–ß–µ—Ç–Ω–æ–µ',
            'odd': '–ù–µ—á–µ—Ç–Ω–æ–µ'
        };
        return names[betType];
    }

    playRoulette() {
        if (!this.selectedBetType) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏!');
            return;
        }

        const bet = parseInt(document.getElementById('roulette-bet').value);
        if (bet > this.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        this.balance -= bet;
        this.updateBalance();

        const wheel = document.getElementById('roulette-wheel');
        const randomRotation = Math.floor(Math.random() * 360) + 1440; // –ú–∏–Ω–∏–º—É–º 4 –æ–±–æ—Ä–æ—Ç–∞
        wheel.style.transform = `rotate(${randomRotation}deg)`;

        setTimeout(() => {
            const winningNumber = Math.floor(Math.random() * 37); // 0-36
            const isRed = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(winningNumber);
            const isBlack = winningNumber !== 0 && !isRed;
            const isEven = winningNumber !== 0 && winningNumber % 2 === 0;
            const isOdd = winningNumber !== 0 && winningNumber % 2 === 1;

            let won = false;
            if (this.selectedBetType === 'red' && isRed) won = true;
            if (this.selectedBetType === 'black' && isBlack) won = true;
            if (this.selectedBetType === 'even' && isEven) won = true;
            if (this.selectedBetType === 'odd' && isOdd) won = true;

            if (won) {
                const winAmount = bet * 2;
                this.balance += winAmount;
                this.updateBalance();
                this.addToLog(`–†—É–ª–µ—Ç–∫–∞: –í—ã–∏–≥—Ä—ã—à ${winAmount} –º–æ–Ω–µ—Ç! –ß–∏—Å–ª–æ: ${winningNumber}`);
            } else {
                this.addToLog(`–†—É–ª–µ—Ç–∫–∞: –ü—Ä–æ–∏–≥—Ä—ã—à ${bet} –º–æ–Ω–µ—Ç. –ß–∏—Å–ª–æ: ${winningNumber}`);
            }
        }, 3000);
    }

    // –ë–õ–≠–ö–î–ñ–ï–ö
    createDeck() {
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        this.deck = [];
        
        for (let suit of suits) {
            for (let rank of ranks) {
                this.deck.push({ suit, rank });
            }
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
        for (let i = this.deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];
        }
    }

    getCardValue(card) {
        if (card.rank === 'A') return 11;
        if (['J', 'Q', 'K'].includes(card.rank)) return 10;
        return parseInt(card.rank);
    }

    calculateHandValue(hand) {
        let value = 0;
        let aces = 0;
        
        for (let card of hand) {
            if (card.rank === 'A') {
                aces++;
                value += 11;
            } else if (['J', 'Q', 'K'].includes(card.rank)) {
                value += 10;
            } else {
                value += parseInt(card.rank);
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã
        while (value > 21 && aces > 0) {
            value -= 10;
            aces--;
        }
        
        return value;
    }

    drawCard() {
        return this.deck.pop();
    }

    displayCard(card) {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.textContent = `${card.rank}${card.suit}`;
        return cardElement;
    }

    updateScores() {
        document.getElementById('player-score').textContent = this.calculateHandValue(this.playerHand);
        document.getElementById('dealer-score').textContent = this.calculateHandValue(this.dealerHand);
    }

    dealBlackjack() {
        const bet = parseInt(document.getElementById('blackjack-bet').value);
        if (bet > this.balance) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        this.balance -= bet;
        this.updateBalance();
        this.blackjackBet = bet;

        this.createDeck();
        this.playerHand = [];
        this.dealerHand = [];
        this.blackjackInProgress = true;

        // –û—á–∏—â–∞–µ–º —Ä—É–∫–∏
        document.getElementById('player-hand').innerHTML = '';
        document.getElementById('dealer-hand').innerHTML = '';
        document.getElementById('blackjack-result').textContent = '';

        // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        this.playerHand.push(this.drawCard());
        this.dealerHand.push(this.drawCard());
        this.playerHand.push(this.drawCard());
        this.dealerHand.push(this.drawCard());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        this.playerHand.forEach(card => {
            document.getElementById('player-hand').appendChild(this.displayCard(card));
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
        document.getElementById('dealer-hand').appendChild(this.displayCard(this.dealerHand[0]));
        const hiddenCard = document.createElement('div');
        hiddenCard.className = 'card';
        hiddenCard.textContent = '?';
        hiddenCard.style.background = '#333';
        hiddenCard.style.color = 'white';
        document.getElementById('dealer-hand').appendChild(hiddenCard);

        this.updateScores();
        document.getElementById('dealer-score').textContent = this.getCardValue(this.dealerHand[0]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
        if (this.calculateHandValue(this.playerHand) === 21) {
            this.stand();
        } else {
            document.getElementById('deal-btn').disabled = true;
            document.getElementById('hit-btn').disabled = false;
            document.getElementById('stand-btn').disabled = false;
        }
    }

    hit() {
        this.playerHand.push(this.drawCard());
        document.getElementById('player-hand').appendChild(this.displayCard(this.playerHand[this.playerHand.length - 1]));
        
        const playerScore = this.calculateHandValue(this.playerHand);
        this.updateScores();
        
        if (playerScore > 21) {
            this.endBlackjack('–ü–µ—Ä–µ–±–æ—Ä! –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.');
        } else if (playerScore === 21) {
            this.stand();
        }
    }

    stand() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
        document.getElementById('dealer-hand').innerHTML = '';
        this.dealerHand.forEach(card => {
            document.getElementById('dealer-hand').appendChild(this.displayCard(card));
        });

        // –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
        while (this.calculateHandValue(this.dealerHand) < 17) {
            this.dealerHand.push(this.drawCard());
            document.getElementById('dealer-hand').appendChild(this.displayCard(this.dealerHand[this.dealerHand.length - 1]));
        }

        this.updateScores();

        const playerScore = this.calculateHandValue(this.playerHand);
        const dealerScore = this.calculateHandValue(this.dealerHand);

        let result = '';
        if (dealerScore > 21) {
            result = '–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
            this.balance += this.blackjackBet * 2;
        } else if (playerScore > dealerScore) {
            result = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
            this.balance += this.blackjackBet * 2;
        } else if (playerScore === dealerScore) {
            result = '–ù–∏—á—å—è!';
            this.balance += this.blackjackBet;
        } else {
            result = '–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!';
        }

        this.endBlackjack(result);
    }

    endBlackjack(result) {
        document.getElementById('blackjack-result').textContent = result;
        document.getElementById('deal-btn').disabled = false;
        document.getElementById('hit-btn').disabled = true;
        document.getElementById('stand-btn').disabled = true;
        this.blackjackInProgress = false;
        this.updateBalance();
        this.addToLog(`–ë–ª—ç–∫–¥–∂–µ–∫: ${result}`);
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∑–∏–Ω–æ
const casino = new Casino()
